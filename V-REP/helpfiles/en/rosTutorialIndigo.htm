<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ROS tutorial Hydro</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ROS tutorial - Indigo</h1>

<p>This tutorial will try to explain in a simple way how you can manage to have V-REP <em>ROS enabled</em>, based on <a href="http://wiki.ros.org/indigo">ROS Indigo</a> and <a href="http://catkin-tools.readthedocs.io/en/latest/installing.html">Catkin build</a>.</p>

<p>First of all you should make sure that you have gone through the <a href="http://www.ros.org/wiki/ROS/Tutorials">official ROS tutorials</a>, at least the beginner section, and that you have installed the <a href="http://catkin-tools.readthedocs.io/en/latest/installing.html">Catkin tools</a>. Then, we assume that you have the latest Ubuntu running, that ROS Indigo is installed, and that the workspace folders are set. Here also refer to the <a href="http://wiki.ros.org/indigo/Installation/Ubuntu">official documentation regarding the ROS installation</a>.</p>

<p>The general ROS functionality in V-REP is supported via the <a href="rosInterf.htm">RosInterface</a> (<em>libv_repExtRosInterface.so</em>). The Linux distribution should include that file already compiled in <em>V-REP/compiledRosPlugins</em>, but it first needs to be copied to <em>V-REP/</em>, otherwise it won't be loaded. You might however experience plugin load problems, depending on your system specificities: make sure to always inspect the terminal window of V-REP for details about plugin load operations. Plugins are loaded when V-REP is launched. The ROS plugin will only successfully load and initialize if <em>roscore</em> is running at that time (<em>roscore</em> is the ROS master).</p>

<p>If the plugin cannot be loaded, then you should recompile it by yourself. It is open source and can be modified as much as needed in order to support a specific feature or to extend its functionality. There are<em> </em>4 packages:</p>

<li><a href="https://github.com/CoppeliaRobotics/v_repExtRosInterface" target="_blank">v_repExtRosInterface</a>: this package is the <a href="rosInterf.htm">RosInterface</a> that will be compiled to a &quot;.so&quot; file, and that is used by V-REP.</li>
<li><a href="https://github.com/CoppeliaRobotics/ros_bubble_rob2" target="_blank">ros_bubble_rob2</a>: this is the package of a very simple robot controller that connects to V-REP via the <a href="rosInterf.htm">RosInterface</a>. This node will be in charge of controlling the  red robot in the demo scene <em>controlTypeExamples.ttt</em></li>
<li><a href="https://github.com/CoppeliaRobotics/vrep_skeleton_msg_and_srv" target="_blank">vrep_skeleton_msg_and_srv</a> and <a href="https://github.com/CoppeliaRobotics/vrep_plugin_skeleton" target="_blank">vrep_plugin_skeleton</a>: those two packages can be used to create your own specific ROS plugin for V-REP (e.g. to support ROS messages for a specific robot).</li>



<p>Above packages should be copied to your <em>catkin_ws/src</em><em> </em>folder. Make sure that ROS is aware of those packages, i.e. that you can switch to above package folders with:</p>
<pre class=lightGreyBox>
$ roscd vrep_ros_interface
$ roscd ros_bubble_rob2
$ roscd vrep_skeleton_msg_and_srv
$ roscd vrep_plugin_skeleton</pre>

<p>In order to build the packages, navigate to the <em>catkin_ws</em> folder and type:</p>

<pre class=lightGreyBox>
$ export VREP_ROOT=~/path/to/v_rep/folder
$ catkin build</pre>

<p>That's it! The packages should have been generated and compiled to an executable or library. Copy and paste the created files to the V-REP installation folder. The plugins are now ready to be used!</p>

<p>Now open a terminal and start the ROS master with:</p>
<pre class=lightGreyBox>
$ roscore</pre>


<p>Open another terminal, move to the V-REP installation folder and start V-REP. This is what you should have (or similar):</p>

<pre class=lightGreyBox>
$ ./vrep.sh
License file 'v_rep':
---> ok
Simulator launched.
Plugin 'BubbleRob': loading...
Plugin 'BubbleRob': load succeeded.
Plugin 'K3': loading...
Plugin 'K3': load succeeded.
Plugin 'RemoteApi': loading...
Plugin 'RemoteApi': load succeeded.
Plugin 'RosInterface': loading...
Plugin 'RosInterface': load succeeded.</pre>


<p>Upon succesful RosInterface load, checking the available nodes gives this:</p>
<pre class=lightGreyBox>
$ rosnode list
/rosout
/vrep_ros_interface</pre>

<p>In an empty V-REP scene, select an object, then attach a <a href="childScripts.htm#nonThreaded">non-threaded child script</a> to it with [Menu bar --&gt; Add --&gt; Associated child script --&gt; non threaded]. Open the <a href="scriptEditor.htm">script editor</a> for that script and replace the content with following:</p>

<pre class=lightRedBox>
function subscriber_callback(msg)
    -- This is the subscriber callback function
    sim.addStatusbarMessage('subscriber receiver following Float32: '..msg.data)
end

function getTransformStamped(objHandle,name,relTo,relToName)
    -- This function retrieves the stamped transform for a specific object
    t=sim.getSystemTime()
    p=sim.getObjectPosition(objHandle,relTo)
    o=sim.getObjectQuaternion(objHandle,relTo)
    return {
        header={
            stamp=t,
            frame_id=relToName
        },
        child_frame_id=name,
        transform={
            translation={x=p[1],y=p[2],z=p[3]},
            rotation={x=o[1],y=o[2],z=o[3],w=o[4]}
        }
    }
end

function sysCall_init()
    -- The child script initialization
    objectHandle=sim.getObjectAssociatedWithScript(sim.handle_self)
    objectName=sim.getObjectName(objectHandle)
    -- Check if the required RosInterface is there:
    moduleName=0
    index=0
    rosInterfacePresent=false
    while moduleName do
        moduleName=sim.getModuleName(index)
        if (moduleName=='RosInterface') then
            rosInterfacePresent=true
        end
        index=index+1
    end

    -- Prepare the float32 publisher and subscriber (we subscribe to the topic we advertise):
    if rosInterfacePresent then
        publisher=simROS.advertise('/simulationTime','std_msgs/Float32')
        subscriber=simROS.subscribe('/simulationTime','std_msgs/Float32','subscriber_callback')
    end
end

function sysCall_actuation()
    -- Send an updated simulation time message, and send the transform of the object attached to this script:
    if rosInterfacePresent then
        simROS.publish(publisher,{data=sim.getSimulationTime()})
        simROS.sendTransform(getTransformStamped(objectHandle,objectName,-1,'world'))
        -- To send several transforms at once, use simROS.sendTransforms instead
    end
end

function sysCall_cleanup()
    -- Following not really needed in a simulation script (i.e. automatically shut down at simulation end):
    if rosInterfacePresent then
        simROS.shutdownPublisher(publisher)
        simROS.shutdownSubscriber(subscriber)
    end
end</pre>






<p>Above script will publish the simulation time, and subscribe to it at the same time. It will also publish the transform of the object the script is attached to. You should be able to see the simulation time topic with:</p>

<pre class=lightGreyBox>
$ rostopic list</pre>

<p>To see the message content, you can type:</p>

<pre class=lightGreyBox>
$ rostopic echo /simulationTime</pre>


<p>Now load the demo scene <em>rosInterfaceTopicPublisherAndSubscriber.ttt</em>, and run the simulation. The code in the <a href="childScripts.htm">child script</a> attached to <em>Vision_sensor</em> will enable a publisher to stream the vision sensor's image, and also enable a subscriber to listen to that same stream. The subscriber applies the read data to the  passive vision sensor, that is only used as a data container. So V-REP is streaming data, while listening to the same data! This is what is happening:</p>

<p align=center><img src="images/rosTut1.jpg"></p>
<p class=imageLabel>[Image publisher and image subscriber demo]</p>
<br>



<p>Try experimenting a little bit with the code. You can also visualize the image that V-REP streams with following command:</p>

<pre class=lightGreyBox>
$ rosrun image_view image_view image:=/visionSensorData</pre>


<p>Had you been streaming simpler data, then you could also have visualized it with:</p>

<pre class=lightGreyBox>
$ rostopic echo /visionSensorData</pre>


<p>Now stop the simulation and load the demo scene <em>controlTypeExamples.ttt</em>, and run the simulation. The scene illustrates the main 7 control methods currently supported in V-REP. The robots are simplistic, and also behaving in a simplistic way for simplification purposes. Run the simulation and focus on the red robot, which is controlled via the <a href="rosInterf.htm">RosInterface</a>:</p>

<p align=center><img src="images/externalControllerTut1.jpg"></p>
<p class=imageLabel>[External client application controlling the red robot via ROS]</p>
<br>



<p>The child script attached to the red robot, and running in a non-threaded fashion, is in charge of following:</p>

<li>determine some object handles (e.g. motor joint handles and proximity sensor handle)</li>
<li>verify if the RosInterface is loaded</li>
<li>add a banner</li>
<li>Launch motor speed subscribers</li>
<li>Launch a sensor publisher and a simulation time publisher</li>
<li> and finally launch a client application. The application is called with some topic names as arguments, so that it will know which topics to listen to and to subscribe. The client application (<em>rosBubbleRob2</em>) is then taking over the control of the red robot via ROS.</li>

<p>While simulation is running, copy and paste a few times the  red robot (well, actually any of the robots!). Notice that every copy is directly operational and independent. This is one of the many strengths of V-REP.</p>

<p>Now stop the simulation and open a new scene, then drag following model into it: <em>Models/tools/rosInterface helper tool.ttm</em>. This model is constituted by a single <a href="customizationScripts.htm">customization script</a> that offers following topic publishers and subscribers:</p>

<li><em>startSimulation</em> topic: can be used to start a simulation by publishing on this topic a <em>std_msgs::Bool</em> message.</li> 
<li><em>pauseSimulation</em> topic: can be used to pause a simulation by publishing on this topic a <em>std_msgs::Bool</em> message.</li> 
<li><em>stopSimulation</em> topic: can be used to stop a simulation by publishing on this topic a <em>std_msgs::Bool</em> message.</li> 
<li><em>enableSyncMode</em> topic: by publishing a <em>std_msgs::Bool</em> message on this topic, you can enable/disable the synchronous simulation mode.</li> 
<li><em>triggerNextStep</em> topic: by publishing a <em>std_msgs::Bool</em> message on this topic, you can trigger the next simulation step, while in the synchronous simulation mode.</li> 
<li><em>simulationStepDone</em> topic: a message of type <em>std_msgs::Bool</em> will be published at the end of each simulation pass.</li> 
<li><em>simulationState</em> topic: messages of type <em>std_msgs::Int32</em> will be published on a regular basis. <em>0</em> indicates that the simulation is stopped, <em>1</em> that it is running and <em>2</em> that it is paused.</li>
<li><em>simulationTime</em> topic: messages of type <em>std_msgs::Float32</em> will be published on a regular basis, indicating the current simulation time.</li>

<p>Have a look at the content of the customization script, that can be fully customized for various purposes. Try generating topic messages from the command line, for instance:</p> 

<pre class=lightGreyBox>
$ rostopic pub /startSimulation std_msgs/Bool true --once
$ rostopic pub /pauseSimulation std_msgs/Bool true --once
$ rostopic pub /stopSimulation std_msgs/Bool true --once
$ rostopic pub /enableSyncMode std_msgs/Bool true --once
$ rostopic pub /startSimulation std_msgs/Bool true --once
$ rostopic pub /triggerNextStep std_msgs/Bool true --once
$ rostopic pub /triggerNextStep std_msgs/Bool true --once
$ rostopic pub /triggerNextStep std_msgs/Bool true --once
$ rostopic pub /stopSimulation std_msgs/Bool true --once</pre>

<p>In order to display the current simulation time, you could type:</p>

<pre class=lightGreyBox>
$ rostopic echo /simulationTime</pre>

<p>Finally, make sure to have a look at the <a href="remoteApiOverview.htm">remote API functionality</a> in V-REP: similarly to ROS, it allows for remote function execution, fast data streaming back and forth, is quite simple to use, leightweight, cross-platform, and available for 7 different languages. It can be an interesting alternative to ROS in some cases.</p>

<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
