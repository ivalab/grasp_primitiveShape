<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simGetVisionSensorFilter</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simGetVisionSensorFilter" id="simGetVisionSensorFilter"></a>simGetVisionSensorFilter / sim.getVisionSensorFilter </h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the parameters and settings of a specific <a href="../visionSensorFilterComposition.htm">filter component</a> of a <a href="../visionSensors.htm">vision sensor</a>. See also <a href="simSetVisionSensorFilter.htm">sim.setVisionSensorFilter</a> and the other <a href="../apiFunctionListCategory.htm#visionSensor">vision sensor related API functions</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>simInt simGetVisionSensorFilter(simInt visionSensorHandle,simInt filterIndex,simInt* options,simInt* pSizes,simUChar** bytes,simInt** ints,simFloat** floats,simUChar** custom)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>
<div><strong>visionSensorHandle</strong>: handle of a vision sensor. See also <a href="simGetObjectHandle.htm">simGetObjectHandle</a>.</div>
<div><strong>filterIndex</strong>: the zero-based index of the filter position.</div>
<div><strong>options</strong>: bit-coded return value:</div>
<div class=tab>bit 0 set (1): the component is enabled</div>
<div><strong>pSizes</strong>: a pointer to 4 integer values receiving the sizes of the returned buffers (see next 4 arguments).</div>
<div><strong>bytes</strong>: a buffer of bytes values representing the byte parameters of the filter component. The user is in charge of releasing that buffer with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>.</div>
<div><strong>ints</strong>: a buffer of ints values representing the int parameters of the filter component. The user is in charge of releasing that buffer with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>.</div>
<div><strong>floats</strong>: a buffer of floats values representing the float parameters of the filter component. The user is in charge of releasing that buffer with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>.</div>
<div><strong>custom</strong>: a buffer of bytes values representing the custom parameters of the filter component. The user is in charge of releasing that buffer with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>.</div>

<br>
<div>USAGE EXAMPLE:</div>
<pre class=lightBlueBoxNoMarginAndSmall>
int options=0;
int sizes[4]={0,0,0,0};
unsigned char* bytes;
int* ints;
float* floats;
unsigned char* custom;
int filterType=simGetVisionSensorFilter(handle,index,&amp;options,sizes,&amp;bytes,&amp;ints,&amp;floats,&amp;custom);
if (filterType&gt;0)
{
    // Modify options, bytes, ints, floats and custom
    // ...
    // Now write back the updated values:
    simSetVisionSensorFilter(handle,index,options,sizes,bytes,ints,floats,custom);
    // Destroy the buffers:
    simReleaseBuffer((simChar*)bytes);
    simReleaseBuffer((simChar*)ints);
    simReleaseBuffer((simChar*)floats);
    simReleaseBuffer((simChar*)custom);
}
</pre>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
<div>-1 in case of an error, 0 if the <em>filterIndex</em> is not valid, otherwise the <a href="../apiConstants.htm#filterComponents">type of filter component</a> pointed by the <em>filterIndex</em>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number filterType,number options,table byteVals,table intVals,table floatVals,string customBuffer=sim.getVisionSensorFilter(number sensorHandle,number filterIndex)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div>Same as C-function</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div>Similar as C-function</div>
<br>
<div>USAGE EXAMPLE:</div>
<pre class=lightRedBoxNoMarginAndSmall>
local filterType,options,bytes,ints,floats,buffer=sim.getVisionSensorFilter(handle,index)
if filterType&gt;0 then
    -- Modify options, bytes, ints, floats and buffer
    -- ...
    -- Now write back the updated values:
    sim.setVisionSensorFilter(handle,index,options,bytes,ints,floats,buffer)
end
</pre>
</td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
