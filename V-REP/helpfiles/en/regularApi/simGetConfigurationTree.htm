<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simGetConfigurationTree</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simGetConfigurationTree" id="simGetConfigurationTree"></a>simGetConfigurationTree / sim.getConfigurationTree </h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves configuration information for a hierarchy tree (object relative positions/orientations, joint/path values). Calling <a href="simSetConfigurationTree.htm">sim.setConfigurationTree</a> at a later time, will restore the object configuration (use this function to temporarily save object positions/orientations/joint/path values)<br></td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>simChar* simGetConfigurationTree(simInt objectHandle)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>
<div><strong>objectHandle</strong>: handle of the object that is at the base of the tree (all objects built on top of this one (including this one)) will have their configuration retrieved. sim_handle_all will retrieve the configuration for the whole scene<br>
</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
<div>Configuration data if operation was successful, NULL otherwise. The returned data should be deleted with <a href="simReleaseBuffer.htm">simReleaseBuffer</a> when not used anymore<br>
</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number rawBufferHandle=sim.getConfigurationTree(number objectHandle)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div>Same as C-function. In addition, child scripts can use the argument sim.handle_self to retrieved the configuration tree of the object that the child script is attached to<br>
</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div></div>
<div><strong>rawBufferHandle</strong>: handle to a block of raw memory, or -1 in case of an error. Use that value to restore the configuration tree with <a href="simSetConfigurationTree.htm">sim.setConfigurationTree</a>. The raw buffer is attached to the script until the simulation ends, at which time it is automatically released. Alternatively, you can release that buffer with the <a href="simReleaseScriptRawBuffer.htm">simReleaseScriptRawBuffer</a>-function<br>
</div>
<div></div></td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
