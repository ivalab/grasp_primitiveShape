<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simSetNameSuffix</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simSetNameSuffix" id="simSetNameSuffix"></a>simSetNameSuffix / sim.setNameSuffix </h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
<div>Sets the name suffix adjustment number (for detailed information on this, read also the section on <a href="../accessingGeneralObjects.htm">accessing general-type objects</a>). In V-REP, all objects are identified by a name and a handle. When an object (scene object or general-type object) is copied at the same time as a child script, the newly created object's name will become &quot;oldName#0&quot;, should the same object be pasted another time, the next name will be &quot;oldName#1&quot;, etc. <br>
</div>
<br> 
<div>From within a child script, retrieving object handles is performed by automatically appending a name suffix to the object name (each script gets initialized with the name suffix number of the object it is attached to). This allows to copy-paste objects and scripts without having to manually adjust the scripts (the scripts will automatically know which object they have to access based on the set name suffix). From within a script, most of the time you won't need to set the name suffix, but in some special cases you might want to temporarily disable it (e.g. &quot;myChildScript#42&quot; (which has its name suffix automatically set to 42) copied itself together with its attached robot (&quot;myRobot#42&quot;) and now from within &quot;myChildScript#42&quot; you want to shift &quot;myRobot#43&quot; to avoid collision. In that case set the name suffix to 43, shift &quot;myRobot&quot; (retrieve its handle with <a href="simGetObjectHandle.htm">sim.getObjectHandle</a>(&quot;myRobot&quot;) then set the suffix back to 42). From within a script, the <a href="simSetNameSuffix.htm">sim.setNameSuffix</a> command is influencing only current script.<br>
</div>
<br> 
<div>When accessing the API from outside of a script however, the name adjustment mechanism needs to be adjusted manually (make sure you reset the name suffix to its initial state after you are done retrieving handles). Imagine you have one robot in your scene that is named &quot;robot&quot;. You can access the robot from a C/C++ application with <a href="simGetObjectHandle.htm">sim.getObjectHandle</a>(&quot;robot&quot;). If the robot is duplicated, the second robot's name will be &quot;robot#0&quot;, the third will be &quot;robot#1&quot;, etc. From within you C/C++ application you can now access all robots with the same code, you just need to adjust the name suffix number. E.g. <a href="simSetNameSuffix.htm">sim.setNameSuffix</a>(42), then <a href="simGetObjectHandle.htm">sim.getObjectHandle</a>(&quot;robot&quot;) will retrieve the handle of &quot;robot#42&quot;. Once you are done accessing objects, reset the name suffix number to -1 (<a href="simSetNameSuffix.htm">sim.setNameSuffix</a>(-1)).<br>
</div>
<br> 
<div>Setting the name suffix to -1 disables the name adjustment mechanism (default when accessing the API from outside of a script)<br>
</div>
<br> 
<div>See also the <a href="simGetNameSuffix.htm">sim.getNameSuffix</a> function.<br>
</div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>simInt simSetNameSuffix(simInt nameSuffixNumber)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>
<div><strong>nameSuffixNumber</strong>: a number starting from -1 (-1 is for no suffix, 0 is for the 0 suffix, etc.)</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
<div>-1 if operation was not successful. In a future release, a more differentiated return value might be available<br>
</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number result sim.setNameSuffix(number nameSuffixNumber)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div>Same as C-function</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div>Same as C-function</div>
<div></div></td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
