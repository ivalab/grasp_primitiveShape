<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simRMLMoveToJointPositions</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simRMLMoveToJointPositions" id="simRMLMoveToJointPositions"></a>simRMLMoveToJointPositions / sim.rmlMoveToJointPositions 
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Moves (actuates) several joints at the same time using the <a href="http://www.reflexxes.com">Reflexxes Motion Library type II or IV</a>. This function   can only be called from <a href="../childScripts.htm">child scripts</a> running in a thread (since this is   a blocking operation) and is not available from the C-API.  See also <a href="simRMLMoveToPosition.htm">sim.rmlMoveToPosition</a>, and <a href="simRMLPos.htm">sim.rmlPos</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>-</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>-</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
-
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number result,table newPos,table newVel,table newAccel,number timeLeft=sim.rmlMoveToJointPositions(table jointHandles,number flags,table currentVel,table currentAccel,table maxVel,table maxAccel,table maxJerk,table targetPos,table targetVel,table direction)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>jointHandles</strong>: handles of the joints to actuate</div>
<div><strong>flags</strong>: <a href="../apiConstants.htm#RMLFunctions">RML flags</a>. -1 for default flags.</div>
<div><strong>currentVel</strong>: the current velocity of the joints. Can be nil in which case a velocity vector of 0 is used.</div>
<div><strong>currentAccel</strong>: the current acceleration of the joints. Can be nil in which case an acceleration vector of 0 is used.</div>
<div><strong>maxVel</strong>: the maximum allowed velocity  of the joints</div>
<div><strong>maxAccel</strong>: the maximum allowed acceleration  of the joints</div>
<div><strong>maxJerk</strong>: the maximum allowed jerk  of the joints. With the RML type II plugin, the max. jerk will however always be infinite.</div>
<div><strong>targetPos</strong>: the desired target positions of the joints</div>
<div><strong>targetVel</strong>: the desired velocity of the joints at the target. Can be nil in which case a velocity vector of 0 is used.</div>
<div><strong>direction</strong>: the desired rotation direction for cyclic revolute joints: 0 for the shortest distance, -x for a movement towards negative values, +x for a movement towards positive values (n=(x-1) represents the number of additional turns). Can be nil or omitted, in which case a value of 0 is used for all joints.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>result</strong>: 1 if the function call was successful</div>
<div><strong>newPos</strong>: the new positions of the joints</div>
<div><strong>newVel</strong>: the new velocities of the joints</div>
<div><strong>newAccel</strong>: the new accelerations of the joints</div>
<div><strong>timeLeft</strong>: the time left for additional calculations in current simulation time step</div>
</td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
